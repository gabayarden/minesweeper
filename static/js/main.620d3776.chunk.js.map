{"version":3,"sources":["components/ooptions-field/OptionsField.js","components/game-options/GameOptions.js","helpers/game-contants.js","components/board-cell/BoardCell.js","helpers/cells-exposer.js","components/board-navigation/BoardNavigation.js","components/board/Board.js","helpers/cells-reducer.js","helpers/cells-creator.js","components/board-wrapper/BoardWrapper.js","components/popup-message/PopupMessage.js","components/minesweeper/MineSweeper.js","App.js","serviceWorker.js","index.js"],"names":["OptionsField","props","react_default","a","createElement","className","type","value","name","onChange","required","label","GameOptions","_this$props","this","height","width","numOfMines","flagsNumber","components_ooptions_field_OptionsField","handleChange","onClick","onNewGame","id","htmlFor","Component","cellType","navigationBoardType","BoardCell","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","number","nextProps","nextState","gameNumber","cell","isOpen","isFlagged","buttonStyles","_this$props$cell","row","col","backgroundStyle","isEven","push","cellStyles","_this$props$cell2","textColorStyle","onCellClick","gameOver","disabled","generateButtonStyles","join","_this$props$cell3","_this$props$cell4","generateCellStyles","renderFlag","renderButton","renderCellContent","exposeCell","cells","objectSpread","addAllNeighbors","cellsToCheck","rowIndex","colIndex","isInRange","cellToAdd","length","BoardNavgiation","dimentions","_this$props$currentLo","currentLocation","newLocation","maxScreenHeight","maxScreenWidth","onMoveBoard","_this$props2","show","allCellsHeight","allCellsWidth","style","shouldShow","_this","generateStyle","onMove","Board","call","state","updateMaxDimensions","bind","assertThisInitialized","location","setState","window","addEventListener","removeEventListener","Math","floor","innerHeight","innerWidth","e","_ref","toConsumableArray","wasFlagPressed","onCellFlagged","checkForWinning","onWin","exposeCellsByClickedType","onLose","event","shiftKey","minePlaces","forEach","minePlace","exposeAllMines","clickedCellRow","clickedCellCol","pop","exposeAllAdjustCells","isCellAlreadyFlagged","hasFlags","onCellFlaggedChanged","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_this2","_this$state","subCells","i","j","getSubset","map","renderCellsInRow","_this3","components_board_cell_BoardCell","_this$state2","generateDimentionsForNavigationButtons","board_navigation_BoardNavigation","renderBoard","craeteNewCell","createCellsInRow","countOfMinesArround","calculateMinesArround","newCell","countOfMinesAround","cellIndexHasMine","BoardWrapper","_ref2","totalNumOfCells","generatedNumbers","mineIndex","random","indexOf","generateMinePlaces","Array","parseInt","fill","createCells","components_board_Board","PopupMessage","title","content","actionText","MineSweeper","flags","isSupermanMode","popup","propertyName","target","propertyValue","checked","isValidInput","defineProperty","isNaN","prevState","cellFlagged","newFlagsNumber","_this$state$popup","components_popup_message_PopupMessage","open","closePopup","handleNewGame","_this4","styles","renderPopup","components_game_options_GameOptions","handleGameOptionChange","components_board_wrapper_BoardWrapper","openWinningPopup","openLosingPopup","App","components_minesweeper_MineSweeper","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.620d3776.chunk.js","sourcesContent":["import React from 'react';\r\nimport './OptionsField.css';\r\n\r\nconst OptionsField = (props) => {\r\n    return (\r\n        <div className=\"field-group\">      \r\n          <input type=\"text\" \r\n                 value={props.value}\r\n                 name={props.name}\r\n                 onChange={props.onChange} required />\r\n          <span className=\"highlight\"></span>\r\n          <span className=\"bar\"></span>\r\n          <label>{props.label}</label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OptionsField;\r\n","import React, { Component } from 'react';\r\nimport './GameOptions.css';\r\nimport OptionsField from '../ooptions-field/OptionsField';\r\n\r\nclass GameOptions extends Component {\r\n  render() {\r\n    const {height, width, numOfMines} = this.props;\r\n    return (\r\n      <div className=\"game-options\">\r\n        <div className=\"flags-number\">\r\n          <div className=\"flag-pic\"></div>\r\n          <span className=\"number\">{this.props.flagsNumber}</span> left\r\n        </div>\r\n        <OptionsField name=\"height\" value={height} onChange={this.props.handleChange} label=\"Height\" />\r\n        <OptionsField name=\"width\" value={width} onChange={this.props.handleChange} label=\"Width\" />\r\n        <OptionsField name=\"numOfMines\" value={numOfMines} onChange={this.props.handleChange} label=\"# Of Mines\" />\r\n        <button className=\"btn red\" onClick={this.props.onNewGame}>Start!</button>\r\n        <div className=\"superman-option\"><input name=\"isSupermanMode\" id=\"isSupermanMode\" type=\"checkbox\" onChange={this.props.handleChange}/> <label htmlFor=\"isSupermanMode\">Superman</label> </div>\r\n        <div className=\"footer\">\r\n          By Yarden Gabay\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameOptions;\r\n","export const cellType = {\r\n    MINE: \"Mine\",\r\n    NUMBER: \"Number\",\r\n    EMPTY: \"Empty\"\r\n}\r\nexport const navigationBoardType = {\r\n    UP: \"Up\",\r\n    DOWN: \"Down\", \r\n    RIGHT: \"Right\",\r\n    LEFT: \"Left\"\r\n}","import React, { Component } from 'react';\r\nimport './BoardCell.css';\r\nimport { cellType } from '../../helpers/game-contants';\r\n\r\nexport class BoardCell extends Component {\r\n\r\n  isEven(number) {\r\n    return number % 2 === 0;\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return  nextProps.gameNumber !== this.props.gameNumber ||\r\n            nextProps.cell.isOpen !== this.props.cell.isOpen ||\r\n            nextProps.cell.isFlagged !== this.props.cell.isFlagged;\r\n  }\r\n\r\n  generateButtonStyles() {\r\n    const buttonStyles = [];\r\n    const {row, col} = this.props.cell;\r\n    let backgroundStyle = (this.isEven(row) && this.isEven(col)) || \r\n                            (!this.isEven(row) && !this.isEven(col)) ? 'dark' : 'light';\r\n    buttonStyles.push(backgroundStyle);                \r\n    return buttonStyles;\r\n  }\r\n  \r\n  generateCellStyles() {\r\n    const cellStyles = [];\r\n    const {value, isOpen, row, col} = this.props.cell;\r\n    if(value && value > 0) {\r\n      let textColorStyle = 'number-color-'+value;\r\n      cellStyles.push(textColorStyle);\r\n    }\r\n    let backgroundStyle = (this.isEven(row) && this.isEven(col)) || \r\n    (!this.isEven(row) && !this.isEven(col)) ? 'dark' : 'light';\r\n    cellStyles.push(backgroundStyle); \r\n    cellStyles.push(\"cell\");\r\n    if(isOpen) {\r\n      cellStyles.push(\"open\");\r\n    }\r\n    return cellStyles;         \r\n  }\r\n\r\n  renderButton() {\r\n    const {onCellClick, gameOver} = this.props;\r\n    return(<button \r\n      disabled={gameOver}\r\n      className={this.generateButtonStyles().join(' ')}\r\n      onClick={onCellClick}>\r\n    </button>);\r\n  }\r\n  renderCellContent() {\r\n    const {value, type} = this.props.cell;\r\n    if(type === cellType.MINE)\r\n      return (<div className=\"led-red\"></div>);\r\n    if(type === cellType.NUMBER) {\r\n      return (<span>{value}</span>);\r\n    }\r\n  }\r\n  renderFlag() {\r\n    const {isOpen, isFlagged} = this.props.cell;\r\n    if(isFlagged && !isOpen) {\r\n      return (<div className='flag'></div>)\r\n    }\r\n    return null;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={this.generateCellStyles().join(' ')}>\r\n        {this.renderFlag()}\r\n        {this.renderButton()}\r\n        <span className='cell-content'>{this.renderCellContent()}</span>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default BoardCell;\r\n","import { cellType } from './game-contants';\r\n\r\nexport const exposeCell = (cells, row, col) => {\r\n    let cell = {\r\n                ...cells[row][col],\r\n                isOpen: true\r\n                };\r\n    cells[row][col] = cell;\r\n  }\r\n\r\n  export const  exposeAllAdjustCells = (cells, clickedCellRow, clickedCellCol) => {\r\n    const cellsToCheck = [];\r\n    cellsToCheck.push(cells[clickedCellRow][clickedCellCol]);\r\n    while(cellsToCheck.length > 0) {\r\n      let cell = cellsToCheck.pop();\r\n      const {row, col } = cell;\r\n      exposeCell(cells, row, col);\r\n      if(cell.type === cellType.EMPTY) {\r\n        addAllNeighbors(row, col, cells, cellsToCheck);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addAllNeighbors = (row, col, cells, cellsToCheck) => {\r\n    for (let rowIndex = row - 1; rowIndex <= row + 1; rowIndex++) {\r\n      for (let colIndex = col - 1; colIndex <= col + 1; colIndex++) {\r\n        if (isInRange(cells, rowIndex, colIndex)) {\r\n          let cellToAdd = cells[rowIndex][colIndex];\r\n          if (!cellToAdd.isOpen && !cellToAdd.isFlagged)\r\n            cellsToCheck.push(cellToAdd);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const isInRange = (cells, row, col) => {\r\n    let height = cells.length;\r\n    if(row < 0 || row > height - 1)\r\n      return false;\r\n    let width = cells[row].length;\r\n    if(col < 0 || col > width - 1)\r\n      return false;\r\n    return true;\r\n  }\r\n  \r\n  export const exposeAllMines = (cells, minePlaces) => {\r\n    minePlaces.forEach(minePlace => {\r\n        let cell = {\r\n          ...cells[minePlace.row][minePlace.col],\r\n          isOpen: true\r\n      }\r\n      cells[minePlace.row][minePlace.col] = cell;\r\n    });\r\n  }","import React, { Component } from 'react';\r\nimport {navigationBoardType} from '../../helpers/game-contants'\r\nimport './BoardNavigation.css';\r\n\r\nclass BoardNavgiation extends Component {\r\n  onMove() {\r\n    const {dimentions, type} = this.props;\r\n    let {row, col} = this.props.currentLocation;\r\n    let newLocation = null;\r\n    switch(type) {\r\n      case navigationBoardType.UP:\r\n        newLocation = {row: row - dimentions.maxScreenHeight, col: col};\r\n        break;\r\n      case navigationBoardType.DOWN:\r\n        newLocation = {row: row + dimentions.maxScreenHeight, col: col};\r\n        break;\r\n      case navigationBoardType.RIGHT:\r\n        newLocation = {row: row, col: col + dimentions.maxScreenWidth};\r\n        break;\r\n      case navigationBoardType.LEFT:\r\n        newLocation = {row: row, col: col - dimentions.maxScreenWidth};\r\n        break;\r\n      default:\r\n        newLocation = {};\r\n        break;\r\n    }\r\n    this.props.onMoveBoard(newLocation);\r\n  }\r\n\r\n  shouldShow() {\r\n    const {dimentions, type, currentLocation} = this.props;\r\n    let show = false;\r\n    switch(type) {\r\n      case navigationBoardType.UP:\r\n        show = currentLocation.row - dimentions.maxScreenHeight >= 0;\r\n        break;\r\n      case navigationBoardType.DOWN:\r\n        show = currentLocation.row + dimentions.maxScreenHeight < dimentions.allCellsHeight;\r\n        break;\r\n      case navigationBoardType.RIGHT:\r\n        show = currentLocation.col + dimentions.maxScreenWidth < dimentions.allCellsWidth;\r\n        break;\r\n      case navigationBoardType.LEFT:\r\n        show = currentLocation.col - dimentions.maxScreenWidth >= 0;\r\n        break;\r\n      default:\r\n        show = false;\r\n        break;\r\n    }\r\n    return show;\r\n  }\r\n  generateStyle() {\r\n    let style = \"nav-button \" + this.props.type;\r\n    if(!this.shouldShow())\r\n      style += \" hide\";\r\n      return style;\r\n  }\r\n  render() {\r\n    return (\r\n      <span className={this.generateStyle()} onClick={() => this.onMove()}></span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardNavgiation;\r\n","import React, { Component } from 'react';\r\nimport './Board.css';\r\nimport BoardCell from '../board-cell/BoardCell';\r\nimport { cellType, navigationBoardType } from '../../helpers/game-contants';\r\nimport {getSubset} from '../../helpers/cells-reducer';\r\nimport {exposeAllAdjustCells, exposeAllMines, exposeCell} from '../../helpers/cells-exposer';\r\nimport BoardNavgiation from '../board-navigation/BoardNavigation';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: this.props.cells,\r\n      gameOver: false,\r\n      currentLocation: {row: 0,col: 0},\r\n      maxScreenWidth: 0,\r\n      maxScreenHeight: 0\r\n    }\r\n    this.updateMaxDimensions = this.updateMaxDimensions.bind(this);\r\n  }\r\n  \r\n  componentWillReceiveProps(nextProps) {\r\n    let location = this.state.currentLocation;\r\n    if(nextProps.gameNumber > this.props.gameNumber) {\r\n      location = {row: 0, col: 0};\r\n    }\r\n    this.setState({\r\n      cells: nextProps.cells,\r\n      gameOver: false,\r\n      currentLocation: location\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateMaxDimensions();\r\n    window.addEventListener('resize', this.updateMaxDimensions);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateMaxDimensions);\r\n  }\r\n  \r\n  updateMaxDimensions() {\r\n    let cellSize = 45;\r\n    let reduceStyleWidth = 340;\r\n    let reduceStyleHeight = 100;\r\n    let maxScreenHeight = Math.floor((window.innerHeight - reduceStyleHeight) / cellSize);\r\n    let maxScreenWidth = Math.floor((window.innerWidth - reduceStyleWidth) / cellSize);\r\n    this.setState({\r\n      maxScreenHeight,\r\n      maxScreenWidth\r\n    })\r\n  }\r\n\r\n  onCellClick(e, {row, col}) {\r\n    if(this.state.gameOver)\r\n      return;\r\n    let cells = [...this.state.cells];\r\n    let cell = cells[row][col];\r\n    let gameOver = false;\r\n    if(this.wasFlagPressed(e)) {\r\n      this.onCellFlagged(cells, row, col);\r\n      if(this.checkForWinning()) {\r\n        gameOver=true;\r\n        this.props.onWin();\r\n      }\r\n    }\r\n    else {\r\n        this.exposeCellsByClickedType(cells, cell);\r\n        if(cell.type === cellType.MINE && !cell.isFlagged) {\r\n          gameOver = true;\r\n          this.props.onLose();\r\n        }\r\n    }\r\n    this.setState({cells, gameOver});\r\n  }\r\n\r\n  wasFlagPressed(event) {\r\n    return event.shiftKey;\r\n  }\r\n\r\n  exposeCellsByClickedType(cells, cell){\r\n    const {row, col, isFlagged, type} = cell;\r\n    if(isFlagged)\r\n      return;\r\n    switch(type) {\r\n      case cellType.MINE:\r\n        exposeAllMines(cells, this.props.minePlaces);\r\n        break;\r\n      case cellType.EMPTY:\r\n        exposeAllAdjustCells(cells, row, col);\r\n        break;\r\n      default:\r\n        exposeCell(cells, row, col);\r\n        break;\r\n    }\r\n  }\r\n\r\n  onCellFlagged(cells, row, col) {\r\n    let isCellAlreadyFlagged = cells[row][col].isFlagged;\r\n    if(!this.props.hasFlags() && !isCellAlreadyFlagged)\r\n    {\r\n      return;\r\n    }\r\n    let cell = {...cells[row][col], isFlagged: !isCellAlreadyFlagged};\r\n   cells[row][col] = cell;\r\n   this.props.onCellFlaggedChanged(cell.isFlagged);\r\n  }\r\n\r\n  checkForWinning() {\r\n    for(let row of this.state.cells) {\r\n      for(let cell of row) {\r\n        if((!cell.isFlagged && cell.type === cellType.MINE) ||\r\n            (cell.isFlagged && !(cell.type === cellType.MINE)))\r\n          return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  onMoveBoard(newLocation) {\r\n    this.setState({\r\n      currentLocation: newLocation\r\n    });\r\n  }\r\n\r\n  renderBoard() {\r\n    const {cells, maxScreenWidth, maxScreenHeight, currentLocation} = this.state;\r\n    const {row, col} = currentLocation;\r\n    let cellsToShow = getSubset(cells, row, col, maxScreenHeight, maxScreenWidth);\r\n    let domBoard = cellsToShow.map((row, i) => {\r\n      return(<div key={i} className='row'>\r\n      { this.renderCellsInRow(row) }\r\n      </div>)\r\n    })\r\n    return domBoard;\r\n  }\r\n\r\n  renderCellsInRow(row) {\r\n    let domRow = row.map((cell) => {\r\n      const {key, row, col} = cell;\r\n      return (\r\n          <BoardCell \r\n            key={key}\r\n            onCellClick = {(e) => this.onCellClick(e, {row, col})}\r\n            cell={cell}\r\n            gameOver={this.state.gameOver}\r\n            gameNumber={this.props.gameNumber}/>\r\n      );  \r\n    })\r\n    return domRow;\r\n  }\r\n  generateDimentionsForNavigationButtons() {\r\n    const {maxScreenHeight, maxScreenWidth, cells} = this.state;\r\n    let dimentions = {maxScreenHeight, maxScreenWidth, allCellsHeight: 0, allCellsWidth: 0}\r\n    if(cells.length > 0 && cells[0].length > 0) {\r\n        dimentions.allCellsHeight = cells.length;\r\n        dimentions.allCellsWidth = cells[0].length;\r\n    }\r\n    return dimentions;\r\n  }\r\n  render() {\r\n    let dimentions = this.generateDimentionsForNavigationButtons();\r\n    const {currentLocation} = this.state;\r\n    return (\r\n      <div className=\"board\"> \r\n        <BoardNavgiation dimentions={dimentions} type={navigationBoardType.DOWN} onMoveBoard={this.onMoveBoard.bind(this)}  currentLocation={currentLocation}/>\r\n        <BoardNavgiation dimentions={dimentions} type={navigationBoardType.UP} onMoveBoard={this.onMoveBoard.bind(this)} currentLocation={currentLocation}/>\r\n        <BoardNavgiation dimentions={dimentions} type={navigationBoardType.LEFT} onMoveBoard={this.onMoveBoard.bind(this)} currentLocation={currentLocation}/>\r\n        <BoardNavgiation dimentions={dimentions} type={navigationBoardType.RIGHT} onMoveBoard={this.onMoveBoard.bind(this)} currentLocation={currentLocation}/>\r\n        { this.renderBoard() }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","export const getSubset = (cells, row, col, maxScreenHeight, maxScreenWidth) => {\r\n    let subCells = [];\r\n    for(let i = row; i < row + maxScreenHeight; i++) {\r\n      if(i >= cells.length)\r\n        break;\r\n      let row = [];\r\n      subCells.push(row);\r\n      for(let j = col; j < col + maxScreenWidth; j++) \r\n      {\r\n        if(j >= cells[i].length) {\r\n          break;\r\n        }\r\n        row.push(cells[i][j]);\r\n      }\r\n    }\r\n    return subCells;\r\n  }","import {cellType} from './game-contants'\r\n\r\nexport const createCells = ({height, width, minePlaces}) => {\r\n    if(!height || !width || !minePlaces) {\r\n      return [];\r\n    }\r\n    let cells = new Array(parseInt(height));\r\n    for(let i=0 ; i<height; i++) {\r\n      cells[i] = new Array(parseInt(width)).fill(null);;\r\n    }\r\n    if(minePlaces) {\r\n      minePlaces.forEach((minePlace) => {\r\n      const {row, col} = minePlace;\r\n      let newCell = craeteNewCell(row + width * col, row, col);\r\n      newCell.type = cellType.MINE;\r\n      cells[row][col] = newCell;\r\n      });\r\n    }\r\n    cells.forEach((row, rowIndex) => {\r\n      createCellsInRow(cells, row, rowIndex, width);\r\n    });\r\n    return cells;\r\n  }\r\n\r\n  const craeteNewCell = (key, row, col) => {\r\n    return {\r\n              key, \r\n              row, \r\n              col,\r\n              value: null,\r\n              isOpen: false,\r\n              isFlagged: false\r\n    };\r\n  }\r\n\r\n  const createCellsInRow = (cells, row, rowIndex, width) => {\r\n    row.forEach((cell, colIndex) => {\r\n      if(!cell) {\r\n        let countOfMinesArround = calculateMinesArround(rowIndex, colIndex, cells);\r\n        let newCell = craeteNewCell(colIndex + width * rowIndex, rowIndex, colIndex);\r\n        if(countOfMinesArround === 0) {\r\n          newCell.type = cellType.EMPTY;\r\n        } else {\r\n          newCell.type = cellType.NUMBER;\r\n          newCell.value = countOfMinesArround;\r\n        }\r\n        row[colIndex] = newCell;;\r\n      }\r\n    })\r\n  }\r\n\r\n  const calculateMinesArround = (rowIndex, colIndex, cells) => {\r\n    let countOfMinesAround = 0;\r\n    for(let i = rowIndex - 1; i <= rowIndex + 1; i++) {\r\n      for(let j = colIndex -1; j <= colIndex + 1; j++) {\r\n        if(cellIndexHasMine(i, j, cells)) {\r\n          countOfMinesAround++;\r\n        }   \r\n      } \r\n    }\r\n    return countOfMinesAround;\r\n  }\r\n  \r\n  const cellIndexHasMine = (rowIndex, colIndex, cells) => {\r\n    if(rowIndex > cells.length - 1 || rowIndex < 0)\r\n      return false;\r\n    let row = cells[rowIndex];\r\n    if(colIndex > row.length - 1 ||  colIndex < 0)\r\n      return false;\r\n    return row[colIndex] && row[colIndex].type === cellType.MINE;\r\n  }\r\n\r\n  export const generateMinePlaces = ({height, width, numOfMines}) => {\r\n    if(numOfMines > height * width)\r\n      return [];\r\n    const totalNumOfCells = height * width;\r\n    let minePlaces = [];\r\n    let generatedNumbers = [];\r\n    while(minePlaces.length < numOfMines){\r\n      var mineIndex = Math.floor(Math.random()*totalNumOfCells);\r\n      if(generatedNumbers.indexOf(mineIndex) === -1) {\r\n        let row = Math.floor(mineIndex / width);\r\n        let col = mineIndex % width;\r\n        minePlaces.push({row, col});\r\n        generatedNumbers.push(mineIndex);\r\n      }\r\n    }\r\n    return minePlaces;\r\n  }\r\n  \r\n","import React, { Component } from 'react';\r\nimport './BoardWrapper.css';\r\nimport Board from '../board/Board';\r\nimport { generateMinePlaces, createCells } from '../../helpers/cells-creator';\r\n\r\nclass BoardWrapper extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.gameNumber !== this.props.gameNumber;\r\n  }\r\n  render() {\r\n    const {height, width, numOfMines, onCellFlaggedChanged, hasFlags} = this.props;\r\n    const minePlaces = generateMinePlaces({height, width, numOfMines});\r\n    const cells = createCells({height, width, minePlaces});\r\n    return (\r\n      <div className='board-wrapper'>\r\n          <Board\r\n            cells={cells}\r\n            minePlaces={minePlaces}\r\n            onCellFlaggedChanged={onCellFlaggedChanged}\r\n            hasFlags={hasFlags}\r\n            onWin={this.props.onWin}\r\n            onLose={this.props.onLose}\r\n            gameNumber={this.props.gameNumber}/>\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardWrapper;\r\n","import React from 'react';\r\nimport './PopupMessage.css';\r\n\r\nconst PopupMessage = (props) => {\r\n\r\n    return (\r\n      <div className=\"popup\"> \r\n          <div className=\"popup-inner\">\r\n          <h2>{props.title}</h2>\r\n          {props.content}\r\n            <div className=\"popup-footer\">\r\n            <button className=\"btn red\" onClick={props.onClick}>{props.actionText}</button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default PopupMessage;\r\n","import React, { Component } from 'react';\r\nimport './MineSweeper.css';\r\nimport GameOptions from '../game-options/GameOptions';\r\nimport BoardWrapper from '../board-wrapper/BoardWrapper';\r\nimport PopupMessage from '../popup-message/PopupMessage';\r\n\r\nclass MineSweeper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      height: 10,\r\n      width: 10, \r\n      numOfMines: 15,\r\n      flags: 15,\r\n      gameNumber: 1,\r\n      isSupermanMode: false,\r\n      popup: {}\r\n    };\r\n  }\r\n  handleGameOptionChange(event) {\r\n    let propertyName = event.target.name;\r\n    let propertyValue = event.target.value;\r\n    if(event.target.type === \"checkbox\")\r\n      propertyValue = event.target.checked;\r\n    if(!this.isValidInput(event))\r\n      return;\r\n    this.setState({[propertyName]: propertyValue})\r\n  }\r\n  isValidInput(event) {\r\n    let value = event.target.value;\r\n    if(event.target.type === \"checkbox\")\r\n      return true;\r\n    let isNotValidText = (value !== '' && value <= 0) || isNaN(value);\r\n    if(isNotValidText)\r\n      return false;\r\n    return true;\r\n  }\r\n  handleNewGame() {\r\n    const {height, width, numOfMines} = this.state;\r\n    if(numOfMines > height * width)\r\n      return;\r\n    this.setState((prevState, props) => {\r\n      return {\r\n              height,\r\n              width,\r\n              numOfMines,\r\n              flags: numOfMines,\r\n              gameNumber: prevState.gameNumber+1\r\n             }\r\n    });\r\n  } \r\n  onCellFlaggedChanged(cellFlagged) {\r\n    let newFlagsNumber = cellFlagged ? this.state.flags - 1 : this.state.flags + 1;\r\n    this.setState({\r\n      flags: newFlagsNumber\r\n    });\r\n  }\r\n  renderPopup() {\r\n    const {show, title, content, actionText, onClick} = this.state.popup;\r\n    if(show) {\r\n      return (<PopupMessage \r\n                title={title} \r\n                content={content}\r\n                actionText={actionText}\r\n                onClick={onClick} />);\r\n    }\r\n  }\r\n  closePopup() {\r\n    this.setState({\r\n      popup: {\r\n        open: false\r\n      }\r\n    });\r\n  }\r\n  openWinningPopup() {\r\n    this.setState({\r\n      popup: {\r\n        show:true,\r\n        title: \"You Won!\",\r\n        content: \"Great job, you did find all the mines!\",\r\n        actionText: \"Start Over\",\r\n        onClick: () => {this.closePopup(); this.handleNewGame()}\r\n      }\r\n    });\r\n  }\r\n  openLosingPopup() {\r\n    this.setState({\r\n      popup: {\r\n        show:true,\r\n        title: \"You Lost :(\",\r\n        content: \"You hitted a mine! you can try again...\",\r\n        actionText: \"Start Over\",\r\n        onClick: () => {this.closePopup(); this.handleNewGame()}\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    const {height, width, numOfMines, flags, gameNumber} = this.state;\r\n    const styles = ['game-container'];\r\n    if(this.state.isSupermanMode)\r\n      styles.push('superman-mode');\r\n    return (\r\n      <div className={styles.join(' ')}>\r\n        {this.renderPopup()}\r\n        <GameOptions onNewGame={this.handleNewGame.bind(this)} \r\n                     flagsNumber={flags}\r\n                     handleChange={this.handleGameOptionChange.bind(this)}\r\n                     height={height}\r\n                     width={width}\r\n                     numOfMines={numOfMines}/>\r\n        <BoardWrapper height={height} \r\n                      width={width} \r\n                      numOfMines={numOfMines} \r\n                      onCellFlaggedChanged={this.onCellFlaggedChanged.bind(this)}\r\n                      gameNumber={gameNumber}\r\n                      hasFlags={() => this.state.flags > 0}\r\n                      onWin={this.openWinningPopup.bind(this)}\r\n                      onLose={this.openLosingPopup.bind(this)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MineSweeper;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MineSweeper from './components/minesweeper/MineSweeper';\n\nclass App extends Component {\n  render() {\n    return (\n      <MineSweeper />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}